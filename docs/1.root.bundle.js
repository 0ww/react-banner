(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{92:function(s,n,a){"use strict";a.r(n),n.default='<p>Customizing React Banner can be done in two ways. The props listed below can\nbe used to tweak, change, and respond to the <strong>functionality</strong> offered by this\ncomponent. To change the <strong>layout</strong> and <strong>color scheme</strong> we recommend\nextending or forking the base stylesheet.</p>\n<h2>Supported Props</h2>\n<h4>blockName (string)</h4>\n<p>This package follows <a href="http://getbem.com/naming/">BEM naming conventions</a>. If you are doing a lot of\ncustom styling or otherwise require control of the base name for all css\nclasses, go ahead and use this option to alter the base class. </p>\n<blockquote>\n<p><strong>Warning:</strong> This requires that you fork the stylesheet and update all\nclasses there as well.</p>\n</blockquote>\n<h4>className (string)</h4>\n<p>Adds an additional class to the root <code>&#x3C;header></code> element.</p>\n<h4>logo (node)</h4>\n<p>The image, text, or whatever else you may want to display in the left section\nof the banner.</p>\n<h4>url (string)</h4>\n<p>The current url, used to determine which link (or links) is active. If you\'re\nbuilding a normal site it\'s enough to just pass <code>window.location.pathname</code>,\nwith <a href="https://github.com/ReactTraining/react-router">react-router</a> <code>props.location.pathname</code> should be used.</p>\n<h4>link (component)</h4>\n<p>The component used for routing and displaying links. See the <strong>Custom Links</strong>\nsection below for more details.</p>\n<h4>items (array)</h4>\n<p>The data used to generate the navigation items. Pass an array of objects that\nconform to the spec in <strong>Item Data</strong> below.</p>\n<h4>searchBar (boolean)</h4>\n<p>Pass <code>false</code> to remove the search bar.</p>\n<h4>onMenuClick (function)</h4>\n<p>A callback fired whenever the mobile ("hamburger") menu button is clicked.</p>\n<h4>onSearch (function)</h4>\n<p>A callback fired whenever the user changes the search input.</p>\n<h2>Item Data</h2>\n<p>Each link object <strong>MUST</strong> contain <code>title</code> and <code>url</code> properties. This component\nwill also handle the first level of <code>children</code> link objects by displaying a\nsecondary navigation menu under the main banner. Any more levels of nested\n<code>children</code> would have to be handled using a custom link component (described\nabove) or in another part of your site. Here\'s an example of a valid link\nobject:</p>\n<pre><code class="hljs language-js">{\n    <span class="hljs-attr">content</span>: <span class="hljs-string">\'Example\'</span>,\n    <span class="hljs-attr">url</span>: <span class="hljs-string">\'/example\'</span>,\n    <span class="hljs-attr">children</span>: [ ... ] <span class="hljs-comment">// Optional</span>\n}</code></pre>\n<p>Note that anything renderable is allowed in the link\'s <code>title</code> prop, e.g. the\nfollowing code would allow you to render an icon in place of text (using JSX):</p>\n<pre><code class="hljs language-js">{\n    <span class="hljs-attr">title</span>: <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"icon-github"</span> /></span>,\n    url: \'https://github.com\'\n}</span></code></pre>\n<blockquote>\n<p><strong>Note:</strong> The icon code shown above is dependent on having an icon font\navailable (e.g. <a href="http://fontawesome.io/">font awesome</a>). However you could also render a full\nSVG, component, or anything else in the same manner.</p>\n</blockquote>\n<h2>Custom Links</h2>\n<p>Passing a custom link component can be an easy way to extend the navigation\nsection of the banner. For example, you could pass a custom component that\nacts as a dropdown to render <code>children</code> if your site contains a large amount\nof pages.</p>\n<p>There are two pre-built link components provided in the <code>/src/links</code>\ndirectory: <code>StandardLink</code> being the default while <code>SPALink</code> can be used for\nsingle page applications using react-router (like this site, for example). The\ndata from each link object, described below, is spread onto this component as\nprops as well as a BEM element class name and active modifier class (if the\nlink is active). </p>\n<p>The two components above, however, are more for demonstration purposes and not\nvery customizable. We recommend creating your own link component, using the <a href="https://github.com/skipjack/react-banner/tree/master/src/links">\ntwo defaults</a> for inspiration. For example, you could use HTML5 history API\nmanually:</p>\n<pre><code class="hljs language-js"><span class="hljs-comment">// ... import dependencies and such</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomLink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n    render() {\n        <span class="hljs-keyword">let</span> { index, url, ...otherProps } = <span class="hljs-keyword">this</span>.props\n\n        <span class="hljs-keyword">return</span> (\n            <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">a</span> \n                { <span class="hljs-attr">...otherProps</span> } \n                <span class="hljs-attr">href</span>=<span class="hljs-string">{</span> <span class="hljs-attr">index</span> || <span class="hljs-attr">url</span> }\n                <span class="hljs-attr">onClick</span>=<span class="hljs-string">{</span> <span class="hljs-attr">this._navigate.bind</span>(<span class="hljs-attr">this</span>, <span class="hljs-attr">index</span> || <span class="hljs-attr">url</span>)></span>\n                { props.children }\n            <span class="hljs-tag">&#x3C;/<span class="hljs-name">a</span>></span></span>\n        )\n    }\n\n    _navigate(url = <span class="hljs-string">\'\'</span>, event) {\n        <span class="hljs-keyword">if</span> ( !url.match(<span class="hljs-regexp">/^https?:/</span>) ) {\n            event.preventDefault()\n            history.pushState({\n                <span class="hljs-attr">some</span>: <span class="hljs-string">\'state\'</span>\n            }, <span class="hljs-string">\'MyTitle\'</span>, url)\n        }\n    }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> props => {\n    <span class="hljs-keyword">return</span> (\n        <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Banner</span>\n            <span class="hljs-attr">logo</span>=<span class="hljs-string">"My Logo"</span>\n            <span class="hljs-attr">url</span>=<span class="hljs-string">{</span> <span class="hljs-attr">window.location.pathname</span> }\n            <span class="hljs-attr">link</span>=<span class="hljs-string">{</span> <span class="hljs-attr">CustomLink</span> } // <span class="hljs-attr">Pass</span> <span class="hljs-attr">our</span> <span class="hljs-attr">custom</span> <span class="hljs-attr">link</span> <span class="hljs-attr">component</span>\n            <span class="hljs-attr">items</span>=<span class="hljs-string">{[</span>\n                { "<span class="hljs-attr">content</span>"<span class="hljs-attr">:</span> "<span class="hljs-attr">Example</span> <span class="hljs-attr">Link</span>", "<span class="hljs-attr">url</span>"<span class="hljs-attr">:</span> "/<span class="hljs-attr">example</span>" },\n                { "<span class="hljs-attr">content</span>"<span class="hljs-attr">:</span> "<span class="hljs-attr">Another</span>", "<span class="hljs-attr">url</span>"<span class="hljs-attr">:</span> "/<span class="hljs-attr">another</span>" },\n                { "<span class="hljs-attr">content</span>"<span class="hljs-attr">:</span> "<span class="hljs-attr">Child</span> <span class="hljs-attr">Links</span>", "<span class="hljs-attr">url</span>"<span class="hljs-attr">:</span> "/<span class="hljs-attr">children</span>", "<span class="hljs-attr">children</span>"<span class="hljs-attr">:</span> [\n                    { "<span class="hljs-attr">content</span>"<span class="hljs-attr">:</span> "<span class="hljs-attr">John</span>", "<span class="hljs-attr">url</span>"<span class="hljs-attr">:</span> "/<span class="hljs-attr">children</span>/<span class="hljs-attr">john</span>" },\n                    { "<span class="hljs-attr">content</span>"<span class="hljs-attr">:</span> "<span class="hljs-attr">Jill</span>", "<span class="hljs-attr">url</span>"<span class="hljs-attr">:</span> "/<span class="hljs-attr">children</span>/<span class="hljs-attr">jill</span>" },\n                    { "<span class="hljs-attr">content</span>"<span class="hljs-attr">:</span> "<span class="hljs-attr">Jack</span>", "<span class="hljs-attr">url</span>"<span class="hljs-attr">:</span> "/<span class="hljs-attr">children</span>/<span class="hljs-attr">jack</span>" }\n                ]}\n            ]} /></span>\n    )\n}</span></code></pre>\n<blockquote>\n<p><strong>Note:</strong> If all you\'d like to customize is the styling of items, there is\nno need to pass a custom component. Simply fork and edit the stylesheet as\nyou wish.</p>\n</blockquote>\n<h2>The Stylesheet</h2>\n<p>This component comes with a <a href="https://github.com/skipjack/react-banner/blob/master/dist/style.css">base stylesheet</a> that is meant to be forked\nand extended. Most people will at least need to change the color scheme to\nmatch their own branding. We encourage you to tweak the layout to suit your\nneeds as well but will only officially support the base stylesheet provided.\nMost minor layout changes should be fine, but changing the layout of bits like\nthe search bar could cause some funkiness.</p>\n<p>Below are some design variations people have come up with. If you work some\nmagic of your own please <a href="mailto:greg.venech@gmail.com">ping me</a> and I\'ll add it to the list!</p>\n<blockquote>\n<p>@todo add screenshots</p>\n</blockquote>\n'}}]);
//# sourceMappingURL=1.root.bundle.js.map